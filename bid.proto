syntax = "proto3";
package rusk;

import "basic_fields.proto";
import "keys.proto";


// Bid representation
message Bid {
    PoseidonCipher encrypted_data = 1;
    BlsScalar hashed_secret = 2;
    BlsScalar nonce = 3;
    StealthAddress pk_r = 4;
    JubJubCompressed commitment = 5;
    BlsScalar elegibility_ts = 6;
    BlsScalar expiration_ts = 7;
}

// Used to Request the creation of a Bid
message BidTransactionRequest {
    BlsScalar k = 1;
    StealthAddress pk_r = 2;
    BlsScalar seed = 3;
    fixed64 latest_consensus_round = 4;
    fixed64 latest_consensus_step = 5;
    //rusk.Transaction tx = 5;
}

message BidTransaction {
    BlsScalar m = 1;
    JubJubCompressed commitment = 2;
    fixed64 expiration_height = 3;
}

message FindBidRequest {
    StealthAddress addr = 1;
}

message BidList {
    repeated Bid bid_list = 1;
    repeated BlsScalar bid_hash_list = 2;
}



service Bid {
    // Generate a new Bid and a proof of it's correctness.
    rpc NewBid(BidTransactionRequest) returns (BidTransaction) {}
    // Look for your owned Bids and return a list of them and it's hash repr
    rpc FindBid(FindBidRequest) returns (BidList) {}
    // Request a wirhdraw of a Bid. Not supported yet.
    //rpc NewWithdrawBid(WithdrawBidTransactionRequest) returns (WithdrawBidTransaction) {}
}
